{"version":3,"sources":["serviceWorker.ts","Button.tsx","Tablo.tsx","SetFrame.tsx","Counter.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Button","props","disabled","onClick","callBack","buttonNick","Tablo","style","display","visibilityTablo","className","classname","error","tabloData","MAXDATA","MINDATA","setData","switchVisibility","SetFrame","visibilitySettingsFrame","type","id","name","min","onChange","e","onChangeMaxInput","onChangeMinInput","Counter","useState","setTabloData","maxvalue","SetMaxvalue","minvalue","SetMinvalue","SetError","useEffect","MaxAsString","localStorage","getItem","MaxValue","JSON","parse","setItem","stringify","MinAsString","MinValue","SetvisibilityTablo","SetVisibilitySettingsFrame","currentTarget","valueAsNumber","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.06f408c8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\ntype ButtonPropsType ={\r\nbuttonNick: string\r\ncallBack: ()=>void\r\n\r\ndisabled: boolean\r\n}\r\n\r\n\r\nexport function Button(props:ButtonPropsType){\r\n\r\nreturn(\r\n  <button\r\n  disabled={props.disabled} \r\n  onClick = {props.callBack}\r\n  \r\n  >\r\n    {props.buttonNick}\r\n  </button>\r\n)\r\n\r\n}","import React from 'react'\r\nimport {Button} from './Button'\r\n\r\ntype TabloPropsType ={\r\ntabloData: number\r\nclassname: string\r\nvisibilityTablo: string \r\nswitchVisibility:()=>void\r\nMAXDATA: number\r\nMINDATA: number\r\nsetData: (tabloData: number) => void\r\nerror: string\r\nSetError:(error: string)=>void\r\n}\r\n\r\n\r\nexport function Tablo(props:TabloPropsType){\r\n\r\n\r\n  const incrementCounter =()=>{\r\n    \r\n    if(props.MINDATA <= props.MAXDATA){\r\n      props.setData(props.tabloData + 1)\r\n    }\r\n  }\r\n\r\n\r\n  const resetCounter =()=>{\r\n    props.setData(props.MINDATA)\r\n   \r\n  }\r\n\r\n\r\n\r\nreturn(\r\n  <div style = {{display: props.visibilityTablo}}>\r\n\r\n  \r\n\r\n\r\n  <div className=\"container\">\r\n\r\n\r\n    <div className={props.classname}> \r\n          {props.error ? \"Error !\" : props.tabloData}\r\n    </div>\r\n\r\n    <div className=\"button-wrapper\">\r\n        <Button \r\n        disabled={props.tabloData >= props.MAXDATA}\r\n        buttonNick={'⤴️'}\r\n        callBack = {incrementCounter}\r\n        />\r\n\r\n        <Button\r\n          disabled={false}\r\n          buttonNick={'⚙️'}\r\n          callBack = {props.switchVisibility}\r\n        />\r\n\r\n        <Button\r\n        disabled={props.tabloData <= props.MINDATA }\r\n        buttonNick={'Reset'}\r\n        callBack = {resetCounter}\r\n        />\r\n\r\n\r\n    </div>\r\n  </div>\r\n\r\n  </div>\r\n)\r\n\r\n}","import React from 'react'\r\nimport {Button} from './Button'\r\n\r\ntype SetFramePropsType ={\r\n  visibilitySettingsFrame: string\r\n  MAXDATA: number\r\n  MINDATA: number\r\n  switchVisibility:()=>void\r\n  error: string\r\n  SetError: (error: string)=>void\r\n  onChangeMaxInput:(e:React.ChangeEvent<HTMLInputElement>)=>void\r\n  onChangeMinInput: (e:React.ChangeEvent<HTMLInputElement>)=>void\r\n}\r\n\r\n\r\nexport function SetFrame(props:SetFramePropsType){\r\n\r\n  \r\nconst onChangeMaxInputHandler =(e:React.ChangeEvent<HTMLInputElement>)=>{\r\n  \r\n  props.onChangeMaxInput(e)\r\n  \r\n}\r\n\r\n\r\nconst onChangeMinInputHandler =(e:React.ChangeEvent<HTMLInputElement>)=>{\r\n  \r\n  props.onChangeMinInput(e)\r\n \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n  <div style = {{display: props.visibilitySettingsFrame}}>\r\n\r\n\r\n<div className=\"container\" >\r\n\r\n\r\n   <div className=\"maxvalue\">\r\n      <span>max value: </span>\r\n\r\n      <input \r\n      className={props.error ? \"error\" : \"\"}\r\n\r\n        type=\"number\" \r\n        id=\"quantity1\" \r\n        name=\"quantity1\" \r\n        min=\"0\"\r\n        // max=\"10\"\r\n        onChange={onChangeMaxInputHandler} \r\n        /* value={props.MAXDATA} */\r\n        />\r\n  </div> \r\n  \r\n\r\n   <div className=\"minvalue\">\r\n      <span>start value: </span>\r\n      <input \r\n        className={props.error ? \"error\" : \"\"}\r\n\r\n        type=\"number\"\r\n        id=\"quantity2\"\r\n        name=\"quantity2\"\r\n        min=\"0\"\r\n        // max=\"10\"\r\n        onChange={onChangeMinInputHandler} \r\n        /* value={props.MINDATA} */\r\n        />\r\n  </div> \r\n\r\n  \r\n  \r\n\r\n\r\n      <div className=\"button-wrapper\">\r\n        \r\n        <Button\r\n          disabled={props.error ? true : false}\r\n          buttonNick={'💾'}\r\n          callBack = {props.switchVisibility}\r\n          \r\n        />\r\n\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport \"./Counter.css\";\r\nimport { Tablo } from \"./Tablo\";\r\nimport { SetFrame } from \"./SetFrame\";\r\n\r\nexport const Counter = () => {\r\n\r\n\r\n  const [tabloData, setTabloData] = useState(0);\r\n\r\n  const[maxvalue,SetMaxvalue] = useState(0)\r\n  const[minvalue,SetMinvalue] = useState(0)\r\n\r\n  \r\n\r\n  const[error,SetError] = useState<string>(\"\")\r\n\r\n //   useEffect \r\n\r\n  useEffect(()=>{let MaxAsString = localStorage.getItem(\"maxvalueInLS\");\r\n  let MaxValue = MaxAsString && JSON.parse(MaxAsString);\r\n  SetMaxvalue(MaxValue);},[])\r\n\r\n  useEffect(()=>{\r\n    localStorage.setItem(\"maxvalueInLS\", JSON.stringify(maxvalue))\r\n  },[maxvalue]);\r\n\r\n\r\n  \r\n\r\n  useEffect(()=>{let MinAsString = localStorage.getItem(\"minvalueInLS\");\r\n  let MinValue = MinAsString && JSON.parse(MinAsString);\r\n  SetMinvalue(MinValue);\r\n  setTabloData(MinValue)},[])\r\n\r\n  useEffect(()=>{\r\n    localStorage.setItem(\"minvalueInLS\", JSON.stringify(minvalue))\r\n  },[minvalue]);\r\n\r\n// end\r\n\r\n\r\n\r\n// видимость окон\r\n  let [visibilityTablo, SetvisibilityTablo] = useState(\"none\");\r\n\r\n  let [visibilitySettingsFrame, SetVisibilitySettingsFrame] = useState(\"\");\r\n  //         end\r\n\r\n                       // BLL(pureFunctions)\r\n\r\n\r\n\r\n\r\n  const switchVisibility = () => {\r\n    switch (visibilityTablo) {\r\n      case \"\":\r\n        SetvisibilityTablo(\"none\");\r\n        SetVisibilitySettingsFrame(\"\");\r\n        break;\r\n      default:\r\n        SetvisibilityTablo(\"\");\r\n        SetVisibilitySettingsFrame(\"none\");\r\n    }\r\n  };\r\n\r\n  const onChangeMaxInput =(e:React.ChangeEvent<HTMLInputElement>)=>{\r\n    let maxvalue = e.currentTarget.valueAsNumber\r\n  \r\n\r\n    if(maxvalue === minvalue || maxvalue < minvalue){\r\n      SetMaxvalue(maxvalue)\r\n      SetError(\"Error !!!\")\r\n    }else{\r\n      SetError(\"\") \r\n      SetMaxvalue(maxvalue)\r\n\r\n      localStorage.setItem(\"maxvalueInLS\", JSON.stringify(maxvalue));\r\n     \r\n    }  \r\n  }\r\n\r\n  const onChangeMinInput = (e:React.ChangeEvent<HTMLInputElement>)=>{\r\n    let minvalue = e.currentTarget.valueAsNumber\r\n\r\n    if(minvalue === maxvalue || minvalue > maxvalue){\r\n      SetMinvalue(minvalue)\r\n      SetError(\"Error !!!\")\r\n    }else{\r\n      SetError(\"\") \r\n      SetMinvalue(minvalue)\r\n      setTabloData(minvalue)\r\n\r\n      localStorage.setItem(\"minvalueInLS\", JSON.stringify(minvalue));\r\n     \r\n    }  \r\n  }\r\n \r\n\r\n  \r\n//         end\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <main>\r\n      <SetFrame\r\n        visibilitySettingsFrame={visibilitySettingsFrame}\r\n        MAXDATA={maxvalue}\r\n        MINDATA={minvalue}\r\n        switchVisibility={switchVisibility}\r\n        error={error}\r\n        SetError={SetError}\r\n        onChangeMaxInput={onChangeMaxInput}\r\n        onChangeMinInput={onChangeMinInput}\r\n        \r\n      />\r\n\r\n      <Tablo\r\n        visibilityTablo={visibilityTablo}\r\n        classname={tabloData >= maxvalue ? \"error\" : \"data\"}\r\n        tabloData={tabloData}\r\n        MAXDATA={maxvalue}\r\n        MINDATA={minvalue}\r\n        setData={setTabloData}\r\n        switchVisibility={switchVisibility}\r\n        error={error}\r\n        SetError={SetError}\r\n      />\r\n    </main>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Counter} from './Counter';\r\n\r\nReactDOM.render(<Counter />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}